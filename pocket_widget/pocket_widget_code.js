let textRowSize = new Size(250, 0),
	grayColors = Color.dynamic(Color.lightGray(), Color.darkGray()),
	grayFillerTitle = Color.dynamic(new Color("#E3E3E3"), new Color("#2A2A2A")), 
	grayFillerCompany = Color.dynamic(new Color("#ECECEC"), new Color("#2A2A2A")),
	fillerTitleSize = new Size(225, 14),
	fillerCompanySize = new Size(150, 12)

module.exports.data = async (components) => {
	let url = "https://getpocket.com/v3/get?access_token=" + components.accessToken + "&consumer_key=" + components.consumerKey + "&detailType=simple&state=unread&favorite=" + components.favorite + "&count=2"

	let req = new Request(url);
	req.method = "POST";

	let json = await req.loadJSON(),
		values = Object.values(json.list)

	return values
	}

module.exports.propertyCheck = (session, key) => {
	if (session.hasOwnProperty(key)) {
		return true
	} else {
		return false
	}
}

module.exports.horizontalRule = (widget) => {

 	widget.addSpacer(5)

	let hr = widget.addStack()
	hr.backgroundColor = grayFillerCompany //!!!
	hr.size = new Size(310, 1)
	
 	widget.addSpacer(8)
}

module.exports.filler = (widget, amount) => {

	if (amount == 0) {
		widget.addSpacer(5)
	} else {
		module.exports.horizontalRule(widget)
	}

	let entryFiller = widget.addStack()

	let fillerStackLeft = entryFiller.addStack()
	fillerStackLeft.size = textRowSize
	fillerStackLeft.layoutVertically()

	let fillerTitle = fillerStackLeft.addStack()
	let fillerText = fillerTitle.addText(" ")
	fillerTitle.backgroundColor = grayFillerTitle
	fillerTitle.size = fillerTitleSize
	fillerTitle.cornerRadius = cornerRadius

 	 fillerStackLeft.addSpacer(5)

	let fillerCompany = fillerStackLeft.addStack()
	let fillerCompanyText = fillerCompany.addText(" ")
	fillerCompany.backgroundColor = grayFillerCompany
	fillerCompany.size = fillerCompanySize
	fillerCompany.cornerRadius = cornerRadius

 	entryFiller.addSpacer()

	let fillerImage = entryFiller.addStack()
	fillerImage.size = imageSize
	fillerImage.cornerRadius = cornerRadius
	fillerImage.backgroundColor = grayFillerTitle
}

module.exports.articleEntries = async (widget, data) => {
	fontArticle = Font.semiboldSystemFont(12),
	lineLimit = 2,
	fontCompany = Font.regularRoundedSystemFont(10),
	grayAttribution = new Color("#949494"),
	imageSize = new Size(40, 40),
	cornerRadius = 5,
	containerRelativeShape = false
	
	if (data.length == 0) {
		for (mi = 0; mi < 2; mi++) {
			module.exports.filler(widget, mi)
			}
		}

	for (ix = 0; ix < data.length; ix++) {

		let title = module.exports.propertyCheck(data[ix], 'resolved_title'),
			company = module.exports.propertyCheck(data[ix], 'domain_metadata')
			image = module.exports.propertyCheck(data[ix], 'top_image_url'),
			min = module.exports.propertyCheck(data[ix], 'time_to_read')

		if (ix > 0) {
			module.exports.horizontalRule(widget)
		}

		let entryStack = widget.addStack(),
			textStackLeft = entryStack.addStack()
			textStackLeft.layoutVertically()
			textStackLeft.size = textRowSize

		if (title) {
			let textTitle = textStackLeft.addText(data[ix].resolved_title)
			textTitle.font = fontArticle
			textTitle.lineLimit = lineLimit
		}

		if (company) {
			textCompany = data[ix].domain_metadata.name
 			textStackLeft.addSpacer(3)

			if (min) {
				var lineCompany = textStackLeft.addText(textCompany + " â€¢ " + data[ix].time_to_read + " min read")
			} else {
				var lineCompany = textStackLeft.addText(textCompany)
			}

			lineCompany.font = fontCompany
			lineCompany.lineLimit = lineLimit
			lineCompany.textColor = grayAttribution
		}

		entryStack.addSpacer()

		let imageStack = entryStack.addStack()
		imageStack.size = imageSize
		imageStack.cornerRadius = cornerRadius

		if (image) {
			let loadImage = await (new Request(data[ix].top_image_url)).loadImage()
			imageContainer = imageStack.addImage(loadImage)
			imageContainer.containerRelativeShape = containerRelativeShape
			imageContainer.applyFillingContentMode()
		}
		
		if (data.length == 1) {
			module.exports.filler(widget)
		} 
	}
}

module.exports.titleLine = (widget, value) => {

	let crimson = new Color('#DC5059'),
	fontTitle = Font.mediumSystemFont(12),
	fontArticle = Font.semiboldSystemFont(12),
	fontCompany = Font.regularRoundedSystemFont(10)

	let titleStack = widget.addStack()
	titleStack.layoutHorizontally()
	titleStack.centerAlignContent()
	
	let imageLogo = titleStack.addImage(module.exports.logoImg())
	imageLogo.imageSize = new Size(12, 12)

	if (value == 0) {
	var text = "Unread"
	} else {
	var text = "Favorites"
	}
	
	let titleText = titleStack.addText("  " + text)
	titleText.font = fontTitle
	titleText.textColor = crimson

	widget.addSpacer(4)
}

module.exports.logoImg = () => {
	let logo = ""
	return Image.fromData(Data.fromBase64String(logo))
	}
